from django.db import connection
from django.http          import HttpResponseRedirect, HttpResponse
from django.shortcuts     import render, render_to_response, RequestContext
from pis_system.forms     import ItemSearch, LogInForm
from .forms               import *
from pis_system.models    import *
from pis_objects.student  import *
from pis_objects.employee import *
from helpers.helpers      import *
from django.contrib.auth import authenticate, login

SYSTEM_NAME = "Registration Module"
def registration(request):
    context = RequestContext(request)
    user = request.session.get('user')
    data = {'system_name': SYSTEM_NAME,
            'page' : 'view_student',
            'action_url' : ''
    }

    if user is not None: #and hasValidUserGrpAccess(user['id'], 'student'):
        return HttpResponseRedirect('/registration/searchRegStud')
    elif request.method == 'POST': # authenticate user
        login_form = LogInForm(request.POST)
        if login_form.is_valid():
            employee = authenticate(username=login_form.cleaned_data['userID'], password=login_form.cleaned_data['password'])
            if employee is not None and employee.is_active and hasAccess(employee.id, 'student'):
                login(request, employee)
                request.session['user'] = {'id':employee.id, 'userID': employee.username, 'firstname':employee.first_name, 'lastname':employee.last_name}
                return HttpResponseRedirect('/registration/searchRegStud')
            else:
                data['form'] = login_form
                return render_to_response('login.html', data, context)
        else:
            data['errors'] = login_form.errors
            data['form'] = login_form
            return render_to_response('login.html', data, context)
    else:#login precedes
        data['form'] = LogInForm()
        return render_to_response('login.html', data, context)
        
    
def searchRegStudents(request):
    context  = RequestContext(request)
    data = {'system_name' : SYSTEM_NAME,
            'page' : 'view_student',
    }

    if request.method == 'POST':
        search_form = SearchForm(request.POST)
        if search_form.is_valid():
            search_key = search_form.cleaned_data['options']
            search_val = search_form.cleaned_data['search']
            if search_key == 'studentID':
                students = Student.objects.filter(studentID__contains=search_val)
            elif search_key == 'firstname':
                students = Student.objects.filter(firstname__contains=search_val)
            elif search_key == 'lastname':
                students = Student.objects.filter(lastname__contains=search_val)

            data['students'] = students
            data['search_form'] = search_form
            return render_to_response('./registration/searchview_stud.html', data, context)
        else:
           data['search_form'] = search_form
           return render_to_response('./registration/searchview_stud.html', data, context) 
            
    else: # display only the form
        data['search_form'] = SearchForm()
        return render_to_response('./registration/searchview_stud.html', data, context)
               

'''
   this function renders login form
'''
def reg_login(request):
    form       = LogInForm()
    page       = 'login.html'
    sys_name   = 'Student Registration'
    cover_url  = '/static/images/billing_cover.jpg'
    action_url = 'validate_user'
    feedback   = 'Sample Feedback'
    return render(request, 
           page, 
           {  'form'        : form, 
              'system_name' : sys_name, 
              'cover_url'   : cover_url, 
              'action_url'  : action_url, 
              'feedback'    : feedback
           }
    )


def genStudentID(request):
    id = '%s' %genStudId()
    while Student.objects.filter(studentID=id).exists():
        id = '%s' %genStudId()
        
    return HttpResponse(id)


'''
  regStud function registers new student and corresponding bills for new student
'''
def regStud(request): #add and edit student information
    context = RequestContext(request)
    data = {'action': request.GET.get('action', 'add')}
    sat  = "/registration/regStud/"
    
    if request.method == 'POST':
        stud_form = StudentForm(request.POST, request.FILES)
        if stud_form.is_valid():
            if request.POST["action"] == 'add':
                student = Student(
                    studentID               = stud_form.cleaned_data['studentID'], 
                    firstname               = stud_form.cleaned_data['firstname'],
                    mi                      = stud_form.cleaned_data['mi'],
                    lastname                = stud_form.cleaned_data['lastname'],
                    gender                  = stud_form.cleaned_data['gender'],
                    date_of_birth           = stud_form.cleaned_data['date_of_birth'],
                    date_admitted           = stud_form.cleaned_data['date_admitted'],
                    mother_name             = stud_form.cleaned_data['mother_name'],
                    father_name             = stud_form.cleaned_data['father_name'],
                    mother_occ              = stud_form.cleaned_data['mother_occ'],
                    father_occ              = stud_form.cleaned_data['father_occ'],
                    last_school_att         = stud_form.cleaned_data['last_school_att'],
                    last_school_att_address = stud_form.cleaned_data['last_school_att_add'],
                    acad_status             = stud_form.cleaned_data['acad_status'],
                    privilege            = stud_form.cleaned_data['priv'],
                    year_level              = stud_form.cleaned_data['year_level']
                )
                #image_path              = request.FILES['image_path'],
                # check for name duplicates
                if not Student.objects.filter(firstname=student.firstname, lastname=student.lastname).exists():
                    #add image for student
                    if 'image_path' in request.FILES:
                        student.image_path = request.FILES['image_path']
                    student.save()
                    #add bill account
                    if getRequest(request, 'submit')=="reg_bill":
                        addBillAccount(student, 'NEW')
                    data['success_message'] = "New Student named '%s %s' succesfully saved" %(student.firstname, student.lastname) 
                    data['form'] = stud_form
                    return render_to_response('./registration/reg_stud.html', data, context)
                else:
                    data['error_message'] = "Student named <b> %s %s </b> Already have a profile" %(stud_form['firstname'], stud_form['lastname']) 
                    return render_to_response('./registration/reg_stud.html', data, context)
                    
            else:#update
                student = Student.objects.get(studentID=getRequest(request, 'stud_id'))
                student.firstname = stud_form.cleaned_data['firstname']
                student.mi = stud_form.cleaned_data['mi']
                student.lastname = stud_form.cleaned_data['lastname']
                student.gender = stud_form.cleaned_data['gender']
                student.date_of_birth = stud_form.cleaned_data['date_of_birth']
                student.date_admitted = stud_form.cleaned_data['date_admitted']
                student.mother_name = stud_form.cleaned_data['mother_name']
                student.father_name = stud_form.cleaned_data['father_name']
                student.mother_occ = stud_form.cleaned_data['mother_occ']
                student.father_occ = stud_form.cleaned_data['father_occ']
                student.last_school_att = stud_form.cleaned_data['last_school_att']
                student.last_school_att_address = stud_form.cleaned_data['last_school_att_add']
                student.acad_status = stud_form.cleaned_data['acad_status']
                student.privilege_id = stud_form.cleaned_data['priv']
                student.year_level = stud_form.cleaned_data['year_level']
                student.save()
        else:#invalid form input values
            data['errors'] = stud_form.errors
            data['form'] = stud_form
            data['action'] = request.POST.get('action', 'add')
            return render_to_response('./registration/reg_stud.html', data, context)
    else: # display add ecit form only
        if data['action'] == 'add':
            data['form'] = StudentForm()
            return render_to_response('./registration/reg_stud.html', data, context)
        else:
            data['form'] = StudentForm
            return render_to_response('./registration/reg_stud.html', data, context)


        #return HttpResponseRedirect(url)
        
#byrenx additional script for adding students
def addBillAccount(student, stud_type):
    cursor = connection.cursor()
    
    months_payable_map = { 5: 10, 6: 10, 7: 9, 8:8, 9:7, 10:6, 
                           11:5, 12:4, 1:3, 2:2, 3:1 }

    query_bills = '''SELECT psb.id, psb.item_name, psb.amount
                     FROM pis_system_billitems psb INNER JOIN
                     pis_system_assignbillitem psa 
                     ON psb.id=psa.bill_item_id 
                     AND psb.item_type= %s
                     WHERE psa.year_level = %s'''

    query_ins_acc = '''INSERT INTO pis_system_billaccount
                       (student_id, bill_item_id, balance,
                       date_added, date_fully_paid, discount, amount)
                       VALUES(%s, %s, %s, %s, %s, %s, %s)'''
    months_payable = 10 # default number of tuition months payable
    #compute months payable by the studentsx
    if stud_type=='NEW':
        month_admitted = student.date_admitted.month
        months_payable = months_payable_map[month_admitted]
        
    # get tuition payables 
    cursor.execute(query_bills, ['T', student.year_level])
    tuition = cursor.fetchone()
    # insert student tuition payables to bill_account
    if tuition is not None:
        for i in range(months_payable):
            discounted = discount(tuition[2],student.privilege.discount)
            cursor.execute(query_ins_acc,
                           [student.studentID, tuition[0], discounted, getTodaysdate(), getTodaysdate(), 0,discounted])

    #get registration fee payables
    cursor.execute(query_bills, ['R', student.year_level])
    reg_fee = cursor.fetchone()
    #insert student registration fee to billaccount
    if reg_fee is not None:
        cursor.execute(query_ins_acc, [student.studentID, reg_fee[0], reg_fee[2], getTodaysdate(), getTodaysdate(),0,reg_fee[2]])

    #get miscellaneous fee payables
    cursor.execute(query_bills+''' OR psa.year_level=0''', ['M', student.year_level])
    #insert student miscellaneous payables to bill account
    misc_fees = cursor.fetchall()
    if misc_fees is not None:
        for misc_fee in misc_fees:
            cursor.execute(query_ins_acc,
                           [student.studentID, misc_fee[0], misc_fee[2], getTodaysdate(), getTodaysdate(), 0,misc_fee[2]])

def discount(amount,percent):
    return float(amount) - ((float(percent)/100)*float(amount))   

'''
def employee(request): #edit
    user = { 'name' : request.session['name'], 
             'id'   : request.session['userID']
    }
    sat  = "/registration/searchRegEmp/"
    return render(request, 
           './registration/searchview_emp.html', 
           {  'system_name' : 'Enrolment System', 
              'user'        : user, 
              'sat'         : sat
           }
    )

def searchRegEmployees(request): #edit
    user      = {'name': request.session['name'], 'id': request.session['userID']}
    context   = RequestContext(request)
    option    = getRequest( request, 'e_opt');
    search    = getRequest( request, 'search')
    employees = {}

    try:
        emp_obj   = EmployeeObj()
        employees = emp_obj.searchEmp(search, option)
        return render_to_response('./registration/searchview_emp.html',
               { 'system_name': 'Enrolment System', 
                 'user'       : user, 
                 'employees'  : employees, 
                 'option'     : option, 
                 'search'     : search
               }, 
               context
        )
        
    except Employee.DoesNotExist:
        return HttpResponse("No Results Found!")

def RegEmployees(request): #edit
    user = { 'name' : request.session['name'], 
             'id'   : request.session['userID']
    }
    sat  = "/registration/regEmp/"
    
    return render(request, 
           './registration/reg_emp.html', 
           { 'system_name': 'Enrolment System', 
             'user'       : user, 
             'sat'        : sat
           }
    )

def regEmp(request): #edit
    user = { 'name' : request.session['name'], 
             'id'   : request.session['userID']
    }
    
    if request.method == 'POST':
        #post     = request.POST
        #id       = post['emp_id']
        #fname    = post['emp_fname']
        #mi       = post['emp_mi']
        #lname    = post['emp_lname']
        #position = post['emp_position']
        #address  = post['emp_address']
        
        form = EmployeeForm(request.POST)
        
        if form.is_valid():
            new_employee = form.save()
        
        return render_to_response( './registration/reg_emp.html',
               { 'system_name': 'Enrolment System', 
                 'user'       : user,
                 'form'       : form,
               },
               context_instance = RequestContext(request)
        )
'''

"""    
def regStudForm(request): #edit
    context = RequestContext(request)
    data = {'action' :request.GET.get('action', 'add'),
            'status': request.GET.get('status', 'none'),
            'sat': "/registration/regStud/",
            'form': StudentForm(),
            'system_name': 'Enrolment System', 
            'page'       : 'registration_form'
    }
    
    
    if data['action'] == "edit":
        return render_to_response('./registration/reg_stud.html', data, context)
    else: # default to add
        id = '%s' %genStudId()
        while Student.objects.filter(studentID=id).exists():
            id = '%s' %genStudId()
        
        data['stud_id'] = id
        return render_to_response('./registration/reg_stud.html', data, context)
"""

    

            
'''
    userid      = getRequest(request, 'userID')
    password    = getRequest(request, 'password')
    feedback    = "The Account you Enter is Invalid"
    item_search = ItemSearch()
    sat         = "/registration/searchRegStud"#search action target
    
    if request.session.get('is_logged_in', False):
       user = { #'name' : request.session['name'], 
                'id'   : request.session['userID']
       }
       item_search = ItemSearch()
       return render(request, 
              './registration/searchview_stud.html', 
              {  'system_name':'Enrolment System', 
                 'user':user, 
                 'item_search':item_search, 
                 'sat':sat,
                 'page' : 'view_student'
              }
       )

    #try:
        #user = EmployeeAccount.objects.get(employee=userid)
    user = authenticate(username=userid, password=password)
    if user is not None:
        #employee = Employee.objects.get(employeeID=userid)
        #name = employee.firstname+' '+employee.mi+' '+employee.lastname
        #userID = user.employee.employeeID
        
        request.session['is_logged_in'] = True
        request.session['userID']       = str(user.username)
        #request.session['name']         = str(user.firstname)+ ' ' +str(user.lastname)
        
        user = { #'name' : request.session['name'], 
                 'id'   : request.session['userID']
        }
        
        return render(request, 
               './registration/searchview_stud.html', 
               {  'system_name' : 'Enrolment System', 
                  'user'        : user, 
                  'item_search' : item_search, 
                  'sat'         : sat,
                  'page' : 'view_student'
               }
        )
        
    else:
        return HttpResponseRedirect('registration/login', {'feedback' : feedback})
        
    #except EmployeeAccount.DoesNotExist:
    #    return HttpResponseRedirect('/registration/login', {'feedback' : feedback})
'''
